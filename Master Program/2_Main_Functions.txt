// ***************************************************************************************************************************************************** //

// <------------------------------------------------------------------| Start: Array |-----------------------------------------------------------------> //

// (1) Array Funcitons

void Traversal();
void Insersion();
void Deletion();
void Linear_Search();
void Binary_Search();
void Sort_Array();
void Print_Array();

void Array()
{
    printf("\nSelect Option For Operations in Array: \n");
    printf("1.Traversal\n2.Insersion\n3.Deletion\n4.Linear Search\n5.Binary Search\n6.Sort_Array\n7.Back\n0.Close\n");
    scanf("%d", &a);

    switch (a)
    {
    // Traversal
    case 1:
        Traversal();
        break;

    // Insersion
    case 2:
        Insersion();
        break;

    // Deletion
    case 3:
        Deletion();
        break;

    // Linear Search
    case 4:
        Linear_Search();
        break;

    // Binary Search
    case 5:
        Binary_Search();
        break;

    // Sort Array
    case 6:
        Sort_Array();
        break;

    case 7:
        main();
        break;

    case 0:
        break;

    default:
        printf("\nPlease Select Valid Option !");
        Array();
        break;
    }
}

// <-------------------------------------------------------------------| End: Array |-------------------------------------------------------------------> //

// <------------------------------------------------------------------| Start: Stack |------------------------------------------------------------------> //

// (2) Stack Funcitons

void Push();
void Pop();
void Peep();
void Peek();
void Print_Stack();

void Stack()
{
    printf("\nSelect Option For Operation In Stack:\n");
    printf("1.PUSH\n2.POP\n3.PEEP\n4.PEEK\n5.Back\n0.Close\n");
    scanf("%d", &a);

    switch (a)
    {
    // PUSH Operation
    case 1:
        Push();
        break;

    // POP Operation
    case 2:
        Pop();
        break;

    // PEEP Operation
    case 3:
        Peep();
        break;

    // PEEK Operation
    case 4:
        Peek();
        break;

    case 5:
        main();
        break;

    case 0:
        break;

    default:
        printf("\nPlease Select Valid Option !");
        Stack();
        break;
    }
}

// <-------------------------------------------------------------------| End: Stack |-------------------------------------------------------------------> //

// <------------------------------------------------------------------| Start: Queue |------------------------------------------------------------------> //

// (3) Queue Funtions

void Simple_Queue();
void Circular_Queue();
void Doubly_Ended_Queue();
void Queue()
{
    printf("\nSelect Option For Operation In Queue:\n");
    printf("1.Simple Queue\n2.Circular Queue\n3.Doubly Ended Queue\n4.Back\n0.Close\n");
    scanf("%d", &a);

    switch (a)
    {
    // Simple Queue Operations
    case 1:
        Front = -1;
        Rear = -1;
        Simple_Queue();
        break;

    // Circular Queue Operations
    case 2:
        Front = -1;
        Rear = -1;
        Circular_Queue();
        break;

    // Doubly Ended Queue Operations
    case 3:
        Doubly_Ended_Queue();
        break;

    case 4:
        main();
        break;

    case 0:
        break;

    default:
        printf("\nPlease Select Valid Option !");
        Queue();
        break;
    }
}

// Simple Queue Funcitons

void Enqueue();
void Dequeue();
void Search_Queue();
void Print_Simple_Queue();

void Simple_Queue()
{
    printf("\nSelect Option For Operation In Simple Queue:\n");
    printf("1.ENQUEUE\n2.DEQUEUE\n3.Search Element in Queue\n4.Back\n5.Main\n0.Close\n");
    scanf("%d", &a);

    switch (a)
    {
    // ENQUEUE Operation
    case 1:
        Enqueue();
        break;

    // DEQUEUE Operations
    case 2:
        Dequeue();
        break;

    // Search Element in Queue
    case 3:
        Search_Queue();
        break;

    case 4:
        Queue();
        break;

    case 5:
        main();
        break;

    case 0:
        break;

    default:
        printf("\nPlease Select Valid Option !");
        Simple_Queue();
        break;
    }
}

// Circular Queue Functions

void CIR_Enqueue();
void CIR_Dequeue();
void Print_CIR_Queue();

void Circular_Queue()
{
    printf("\nSelect Option For Operation In Circular Queue:\n");
    printf("1.Circular Enqueue\n2.Circular Dequeue\n3.Back\n4.Main\n0.Close\n");
    scanf("%d", &a);

    switch (a)
    {
    // Circular ENQUEUE
    case 1:
        CIR_Enqueue();
        break;

    // Circular DEQUEUE
    case 2:
        CIR_Dequeue();
        break;

    case 3:
        Queue();
        break;

    case 4:
        main();
        break;

    case 0:
        break;

    default:
        printf("\nPlease Select Valid Option !");
        Circular_Queue();
        break;
    }
}

// Doubly Ended Queue Functions

void DQ_Insert_Front();
void DQ_Delet_Rear();
void Doubly_Ended_Queue()
{
    printf("\nSelect Option For Operation In Doubly Ended Queue:\n");
    printf("1.Insert Front in Double Ended Queue\n2.Delet Rear in Double Ended Queue\n3.Back\n4.Main\n0.Close");
    scanf("%d", &a);

    switch (a)
    {
    // Insert Front in Doubly Ended Queue
    case 1:
        DQ_Insert_Front();
        break;

    // Delet Rear in Doubly Ended Queue
    case 2:
        DQ_Delet_Rear();
        break;

    case 3:
        Queue();
        break;

    case 4:
        main();
        break;

    case 0:
        break;

    default:
        printf("\nPlease Select Valid Option !");
        Circular_Queue();
        break;
    }
}

// <-------------------------------------------------------------------| End: Queue |-------------------------------------------------------------------> //

// <----------------------------------------------------------------| Start: Link List |----------------------------------------------------------------> //

// (4) Link List Functions

void Link_List()
{
}

// <-----------------------------------------------------------------| Endt: Link List |----------------------------------------------------------------> //

// ****************************************************************************************************************************************************** //