// <-------------------------------------------------------------| Start: Array Functions |-------------------------------------------------------------> //

// Traversal Funciton
void Recall_Traversal();
void Traversal()
{
    // ====================================== Start ====================================== //
    if (UB == 0)
    {
        printf("\nArray is Empty !");
    }
    else
    {
        printf("\nTraversing Array:\n");
        Print_Array();
    }
    // ======================================= End ======================================= //
    Recall_Traversal();
}

// Insersion Funciton
void Recall_Insersion();
void Insersion()
{
    // ====================================== Start ====================================== //
    if (UB == N)
    {
        printf("\nYou Can't Insert Element Because Array is Full !");
    }
    else
    {
        printf("\nEnter Position Where You Want ot Insert (Condition: Position <= %d): ", UB);
        scanf("%d", &POS);
        printf("Enter Item You Want To Insert: ");
        scanf("%d", &Data);

        for (i = UB - 1; i >= POS; i--)
        {
            A[i + 1] = A[i];
        }

        A[POS] = Data;
        UB = UB + 1;

        printf("\nArray After Insersion:\n");
        Print_Array();
    }
    // ======================================= End ======================================= //
    Recall_Insersion();
}

// Deletion Funciton
void Recall_Deletion();
void Deletion()
{
    // ====================================== Start ====================================== //
    if (UB == 0)
    {
        printf("\nYou Can't Delet Element Because Array is Empty !");
    }
    else
    {
        printf("\nEnter Position Where You Want ot Delet (Condition: POS <= %d): ", UB);
        scanf("%d", &POS);

        for (i = POS; i < UB; i++)
        {
            A[i] = A[i + 1];
        }

        Data = A[POS];
        UB = UB - 1;

        printf("\nArray After Deletion:\n");
        Print_Array();
    }
    // ======================================= End ======================================= //
    Recall_Deletion();
}

// Linear Search Function
void Recall_Linear_Search();
void Linear_Search()
{
    // ====================================== Start ====================================== //
    if (UB == 0)
    {
        printf("\nYou Can't Search Element Because Array is Empty !");
    }
    else
    {

        printf("\nEnter Item You Want To Search: ");
        scanf("%d", &Data);
        for (i = 0; i < UB; i++)
        {
            if (A[i] == Data)
            {
                a = 0;
                break;
            }
        }
        if (a == 0)
        {
            printf("Match Found At POS[%d]", i);
        }
        else
        {
            printf("Match Not Found !!");
        }
    }
    // ======================================= End ======================================= //
    Recall_Linear_Search();
}

// Binary Search Funciton
void Recall_Binary_Search();
void Binary_Search()
{
    // ====================================== Start ====================================== //
    if (UB == 0)
    {
        printf("\nYou Can't Search Element Because Array is Empty !");
    }
    else
    {
    }
    // ======================================= End ======================================= //
    Recall_Binary_Search();
}

// Sort Funciton
void Recall_Sort_Array();
void Sort_Array()
{
    // ====================================== Start ====================================== //
    if (UB == 0)
    {
        printf("\nYou Can't Sort Array Because Array is Empty !");
    }
    else
    {
    }
    // ======================================= End ======================================= //
    Recall_Sort_Array();
}

// <--------------------------------------------------------------| End: Array Functions |--------------------------------------------------------------> //